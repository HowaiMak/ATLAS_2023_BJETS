#! /usr/bin/env python3

import argparse
from hashlib import sha3_224
from tokenize import Double
ap = argparse.ArgumentParser()
ap.add_argument("FILES", nargs="+")
args = ap.parse_args()

## Import ROOT
import ROOT
ROOT.gROOT.SetBatch(True)

# Import matplot, numpy, scipy
import matplotlib.pyplot as plt
import numpy as np
import scipy

## Set up file chain
chain = ROOT.TChain("CollectionTree");
chain.SetCacheSize(20*1024*1024);
for f in args.FILES:
    chain.Add(f)

## Easy way
#for i, entry in enumerate(chain):
#    #print(i, entry.n, [x for x in entry.xs])
#    print(i, entry.EventInfo___NominalAuxDyn.eventNumber)

## Hard way
import array
n = array.array("i", [0])
chain.SetBranchAddress("EventInfo___NominalAuxDyn.eventNumber", n);

#xs = ROOT.std.vector("double")()
#ept = array.array("f", [0])
#mpt = array.array("f", [0])
#tagpb = array.array("f", [0])
#tagpc = array.array("f", [0])
#tagpu = array.array("f", [0])

# Leptons
ept = ROOT.std.vector("float")()
mpt = ROOT.std.vector("float")()
ephi = ROOT.std.vector("float")()
mphi = ROOT.std.vector("float")()
eeta = ROOT.std.vector("float")()
meta = ROOT.std.vector("float")()
chain.SetBranchAddress("Muons___NominalAuxDyn.pt", mpt);
chain.SetBranchAddress("Muons___NominalAuxDyn.phi", mphi);
chain.SetBranchAddress("Muons___NominalAuxDyn.eta", meta);
chain.SetBranchAddress("Electrons___NominalAuxDyn.pt", ept);
chain.SetBranchAddress("Electrons___NominalAuxDyn.phi", ephi);
chain.SetBranchAddress("Electrons___NominalAuxDyn.eta", eeta);


# Small jets
jpt = ROOT.std.vector("float")()
jphi = ROOT.std.vector("float")()
jeta = ROOT.std.vector("float")()
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.pt", jpt);
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.phi", jphi);
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.eta", jeta);

# Large-R jets
Jpt = ROOT.std.vector("float")()
Jphi = ROOT.std.vector("float")()
Jeta = ROOT.std.vector("float")()
lha = ROOT.std.vector("float")()
c2 = ROOT.std.vector("float")()
d2 = ROOT.std.vector("float")()
tau21 = ROOT.std.vector("float")()
mass = ROOT.std.vector("float")()
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.pt", Jpt);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.phi", Jphi);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.eta", Jeta);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.Angularity", lha);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.C2", c2);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.D2", d2);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.Tau21", tau21);
chain.SetBranchAddress("AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets___NominalAuxDyn.m", mass);

# Tag and probe
tagpb = ROOT.std.vector("double")()
tagpc = ROOT.std.vector("double")()
tagpu = ROOT.std.vector("double")()
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.DL1r_pb", tagpb);
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.DL1r_pc", tagpc);
chain.SetBranchAddress("AntiKt4EMPFlowJets_BTagging201903___NominalAuxDyn.DL1r_pu", tagpu);

# Empty lists
tagpb1=[]
tagpc1=[]
tagpu1=[]

tagpb2=[]
tagpc2=[]
tagpu2=[]

tagpb3=[]
tagpc3=[]
tagpu3=[]

tagscore1=[]
tagscore2=[]
tagscore3=[]

lha_direct=[]
c2_direct=[]
d2_direct=[]
tau21_direct=[]
mass_direct=[]

lha_tnp=[]
c2_tnp=[]
d2_tnp=[]
tau21_tnp=[]
mass_tnp=[]

# DL1 test b-tagging scores
def DL1(pb, pc, pu):
    # Fraction of c-quarks
    fc = 0.03
    jetscore = np.log(pb/(fc*pc+(1-fc)*pu))
    return jetscore

# 70% radial tests jets with passing scores        
def RadialTest(DL1, jn):
    JsMatch_pt=[]
    # Filter out non b-jets
    if DL1 > 2.96:
        # Matching b-jets (subjets) with big jets
        for Jn in range(len(Jpt)):
            dR2 = (jeta[jn] - Jeta[Jn])**2 + (np.fmod(jphi[jn] - Jphi[Jn], np.pi))**2
            if dR2 < 0.7**2:
                JsMatch_pt.append(Jpt[Jn])
            # Veto overlapping big jets
            if len(JsMatch_pt) > 1:
                break
        
    # Only interested in jet1 (highest pT)
    if len(JsMatch_pt) == 1:
        # Direct
        if jn == 0:
            lha_direct.append(lha[0])
            c2_direct.append(c2[0])
            d2_direct.append(d2[0])
            tau21_direct.append(tau21[0])
            mass_direct.append(mass[0])
        # TNP
        if jn == 1:
            lha_tnp.append(lha[0])
            c2_tnp.append(c2[0])
            d2_tnp.append(d2[0])
            tau21_tnp.append(tau21[0])
            mass_tnp.append(mass[0])

# Colliding events
for i in range(chain.GetEntries()):
    chain.GetEntry(i)
    print(i)
    print(" Number of, Electrons: ", len(ept), "Muons", len(mpt), "Jets", len(tagpb))
    if len(ept) > 0:
        print(" Leading Electron, pt: ", ept[0], " eta: ", eeta[0], " phi: ", ephi[0])
    if len(mpt) > 0:
        print(" Leading Muon, pt: ", mpt[0], " eta: ", meta[0], " phi: ", mphi[0])
    if len(jpt) > 0:
        print(" All Jets, pT: ", jpt)
        print(" Leading tagpb: ", tagpb[0], " tagpc: ", tagpc[0], " tagpu: ", tagpu[0])
    # Event selections
    if len(ept) == 1 and len(mpt) == 1 and ept[0] > 20000 and mpt[0] > 20000 and len(jpt) > 1 and len(jpt) < 4 and jpt[0] > 30000:
        print(" Candidate Selected! ")

        # Jet 1 taggings and scores
        tagpb1.append(tagpb[0])
        tagpc1.append(tagpc[0])
        tagpu1.append(tagpu[0])
        jet1score = DL1(tagpb[0], tagpc[0], tagpu[0])
        tagscore1.append(jet1score)
        
        # Jet 2 taggings and scores
        tagpb2.append(tagpb[1])
        tagpc2.append(tagpc[1])
        tagpu2.append(tagpu[1])
        jet2score = DL1(tagpb[1], tagpc[1], tagpu[1])
        tagscore2.append(jet2score)

        # Compute observables within 70% radial of big jet
        if len(jpt) == 2:
            # Direct method
            RadialTest(jet1score, 0)
            # Tag N Probe method
            RadialTest(jet2score, 1)

        # Jet 3 taggings and scores
        if len(jpt) == 3:
            tagpb3.append(tagpb[2])
            tagpc3.append(tagpc[2])
            tagpu3.append(tagpu[2])
            jet3score = DL1(tagpb[2], tagpc[2], tagpu[2])
            tagscore3.append(jet3score)
    print()

print("All events completed!")
print("Data processing and plotting...")

# Saving all passing bjet observables for 
np.savetxt("OBS/LHA_direct.txt", lha_direct)
np.savetxt("OBS/C2_direct.txt", c2_direct)
np.savetxt("OBS/D2_direct.txt", d2_direct)
np.savetxt("OBS/TAU21_direct.txt", tau21_direct)
np.savetxt("OBS/MASS_direct.txt", mass_direct)

np.savetxt("OBS/LHA_tnp.txt", lha_tnp)
np.savetxt("OBS/C2_tnp.txt", c2_tnp)
np.savetxt("OBS/D2_tnp.txt", d2_tnp)
np.savetxt("OBS/TAU21_tnp.txt", tau21_tnp)
np.savetxt("OBS/MASS_tnp.txt", mass_tnp)

# Normalisation for plotting
# Note: normalising to area
def norm(direct_data, tnp_data, NBINS):
    direct_hist, edges = np.histogram(direct_data, NBINS)
    tnp_hist, _ = np.histogram(tnp_data, edges)
    
    direct_errs = np.sqrt(direct_hist)
    tnp_errs = np.sqrt(tnp_hist)
    
    widths = edges[1:] - edges[:-1]
    area_direct = np.sum(direct_hist * widths)
    area_tnp = np.sum(tnp_hist * widths)
    
    direct_hist = direct_hist / area_direct
    direct_errs = direct_errs / area_direct
    tnp_hist = tnp_hist / area_tnp
    tnp_errs = tnp_errs / area_tnp

    return direct_hist, direct_errs, tnp_hist, tnp_errs

# Normalise all observables
lha_direct_hist, lha_direct_errs, lha_tnp_hist, lha_tnp_errs = norm(lha_direct, lha_tnp, 50)
c2_direct_hist, c2_direct_errs, c2_tnp_hist, c2_tnp_errs = norm(c2_direct, c2_tnp, 50)
d2_direct_hist, d2_direct_errs, d2_tnp_hist, d2_tnp_errs = norm(d2_direct, d2_tnp, 50)
tau21_direct_hist, tau21_direct_errs, tau21_tnp_hist, tau21_tnp_errs = norm(tau21_direct, tau21_tnp, 50)
mass_direct_hist, mass_direct_errs, mass_tnp_hist, mass_tnp_errs = norm(mass_direct, mass_tnp, 50)

# Save plots
def savefigs(name):
    plt.legend()
    for fmt in ["pdf", "png"]:
        plt.savefig("PLOTS/"+name+"."+fmt, dpi=150)

# Taggings and scores plot
plt.figure()
plt.title("Jet1: bottom, charm, up quark tagging")
plt.xlabel("Taggings")
plt.ylabel("Jet frequency")
plt.hist(tagpb1, 50, label="$bjet_1$")
plt.hist(tagpc1, 50, label="$cjet_1$")
plt.hist(tagpu1, 50, label="$ujet_1$")
savefigs("tagging-j1")
plt.close()

plt.figure()
plt.title("Jet2: bottom, charm, up quark tagging")
plt.xlabel("Taggings")
plt.ylabel("Jet frequency")
plt.hist(tagpb2, 50, label="$bjet_2$")
plt.hist(tagpc2, 50, label="$cjet_2$")
plt.hist(tagpu2, 50, label="$ujet_2$")
savefigs("tagging-j2")
plt.close()

plt.figure()
plt.title("Jet3: bottom, charm, up quark tagging")
plt.xlabel("Taggings")
plt.ylabel("Jet frequency")
plt.hist(tagpb3, 50, label="$bjet_3$")
plt.hist(tagpc3, 50, label="$cjet_3$")
plt.hist(tagpu3, 50, label="$ujet_3$")
savefigs("tagging-j3")
plt.close()

plt.figure()
plt.title("All Jets: DLR1 tagging scores")
plt.xlabel("Tag scores")
plt.ylabel("Jet frequency")
plt.hist(tagscore1, 50, label="$\\mathrm{DL1}_1$")
plt.hist(tagscore2, 50, label="$\\mathrm{DL1}_2$")
plt.hist(tagscore3, 50, label="$\\mathrm{DL1}_3$")
savefigs("tag-scores")
plt.close()

print()

# chi2 test
def Chi2(obs_a, obs_b, NAME):
    chi2 = np.sum((np.divide(np.square(np.subtract(obs_a, obs_b)), np.sum(obs_a + obs_b))))
    print(NAME, " CHI2 test : ", chi2)
    print()
    plt.hist([], color="w", alpha=0, label="$\chi^2$: {}".format(chi2))

# JET1 Observables plots
plt.figure()
plt.title("Direct, Tag & Probe: LHA")
plt.xlabel("Les Houches Angularity")
plt.ylabel("Normalised bottom jets frequency")
plt.hist(lha_tnp_hist, label="$TNP$")
plt.hist(lha_direct_hist, label="$Direct$")
Chi2(lha_direct_hist, lha_tnp_hist, "LHA")
savefigs("LHA")
plt.close()


plt.figure()
plt.title("Direct, Tag & Probe: C2")
plt.xlabel("C2 correlation")
plt.ylabel("Normalised bottom jets frequency")
plt.hist(c2_tnp_hist, label="$TNP$")
plt.hist(c2_direct_hist, label="$Direct$")
Chi2(c2_direct_hist, c2_tnp_hist, "C2")
savefigs("C2")
plt.close()


plt.figure()
plt.title("Direct, Tag & Probe: D2")
plt.xlabel("D2 correlation")
plt.ylabel("Normalised bottom jets frequency")
plt.hist(d2_tnp_hist, label="$TNP$")
plt.hist(d2_direct_hist, label="$Direct$")
Chi2(d2_direct_hist, d2_tnp_hist, "D2")
savefigs("D2")
plt.close()


plt.figure()
plt.title("Direct, Tag & Probe: TAU21")
plt.xlabel("N-subjettiness")
plt.ylabel("Normalised bottom jets frequency")
plt.hist(tau21_tnp_hist, label="$TNP$")
plt.hist(tau21_direct_hist, label="$Direct$")
Chi2(tau21_direct_hist, tau21_tnp_hist, "TAU21")
savefigs("TAU21")
plt.close()

plt.figure()
plt.title("Direct, Tag & Probe: Mass")
plt.xlabel("Mass")
plt.ylabel("Normalised bottom jets frequency")
plt.hist(mass_tnp_hist, label="$TNP$")
plt.hist(mass_direct_hist, label="$Direct$")
Chi2(mass_direct_hist, mass_tnp_hist, "MASS")
savefigs("MASS")
plt.close()

print("All Evaluations completed!")
